{{> layout/header}}

<section id="section01">
    <div class="container">
        <div class="page-wrapper">

            <h3 class="page-title mb-50">
                상담일정 확인
            </h3>
            <div class="page-content">
                <div class="schedule">
                    <div class="schedule-title main-background">
                        <span>회원정보</span>
                        <span>이용권</span>
                        <span>횟수/이용횟수</span>
                        <span>신청날짜</span>
                        <span>예약일정</span>
                        <span>상담</span>
                    </div>
                    <ul class="schedule-list">

                        <!-- Mustache 템플릿에서 사용되는 데이터 구조 확인 -->
                    </ul>
                </div>

                <div class="d-flex justify-content-center">
                    <ul class="pagination my-3" id="pagination-stories">
                        <!-- Pagination for '나의 사연' -->
                    </ul>
                </div>
                <!-- 페이지 네이션 -->
                <ul id="pagenation" class="pagination my-3" style=" display: flex; justify-content: center;">

                </ul>
            </div>
        </div>
    </div>
</section>
<script>
    let currentPage = 0;

    const userId = '{{sessionUser.id}}'; // 실제 사용자 ID로 교체
    const size = 5; // 페이지 당 항목 수
    let totalPages = 0;

    // 초기 로드
    initializePagination();

    function changePage(page) {
        if (page >= 0 && page < totalPages) {
            currentPage = page;
            fetchSchedules(currentPage);
        }
    }

    function fetchSchedules(page) {
        $.ajax({
            url: `/client/schedule`,
            method: 'GET',
            data: {
                userId: userId,
                page: page,
                size: size
            },
            success: function (data) {
                if (data.content.length > 0) {
                    const scheduleData = data.content[0]; // CounselDTORecord 데이터
                    updateScheduleList(scheduleData.user, scheduleData.reservationStatus); // user 목록과 reservationStatus 전달
                } else {
                    updateScheduleList([], ''); // 데이터가 없을 경우 빈 배열과 빈 상태 전달
                }
                totalPages = data.totalPages; // 서버에서 제공한 totalPages 사용
                updatePagination(data);
            },
            error: function (error) {
                console.error('Error fetching schedules:', error);
            }
        });
    }

    function updateScheduleList(users, reservationStatus) {
        const container = $('.schedule-list');
        container.empty();
        users.forEach(user => {
            const scheduleElement = `
            <li>
                <div class="schedule-item">
                    <figure>
                        <img src = ${user.imagePath}>
                    </figure>
                    <p>${user.name}</p>
                </div>
                <div class="schedule-item">
                    <p>${user.voucherType}</p>
                </div>
                <div class="schedule-item">
                    <p>${user.remainCount}회/${user.totalCount}회</p>
                </div>
                <div class="schedule-item">
                    <p>${user.applyDate}</p>
                </div>
                <div class="schedule-item">
                    ${user.isComplete ? '<button class="reservation-confirm" disabled>예약확정</button>' : `<button class="reservation-confirm" onclick="confirmed(${user.counselId}, this)">확정대기</button>`}
                </div>
                <div class="schedule-item">
                    <p><a href="/chat/${user.counselId}" class="schedule-btn">상담하러가기</a></p>
                </div>
            </li>
        `;
            container.append(scheduleElement);
        });
    }

    function updatePagination(pageData) {
        const pagination = $('#pagenation');
        pagination.empty();

        // 이전 페이지로 이동 버튼
        const prevButton = $('<li>')
                .addClass('page-item')
                .append(
                        $('<button>')
                                .addClass('page-link')
                                .html('Prev')
                                .prop('disabled', pageData.first)
                                .click(() => {
                                    changePage(pageData.number - 1);
                                })
                );
        pagination.append(prevButton);

        // 페이지 번호 버튼들
        for (let i = 0; i < pageData.totalPages; i++) {
            const pageItem = $('<li>')
                    .addClass('page-item')
                    .toggleClass('active', i === pageData.number)
                    .append(
                            $('<button>')
                                    .addClass('page-link')
                                    .text(i + 1)
                                    .click(() => {
                                        changePage(i);
                                    })
                    );
            pagination.append(pageItem);
        }

        // 다음 페이지로 이동 버튼
        const nextButton = $('<li>')
                .addClass('page-item')
                .append(
                        $('<button>')
                                .addClass('page-link')
                                .html('Next')
                                .prop('disabled', pageData.last)
                                .click(() => {
                                    changePage(pageData.number + 1);
                                })
                );
        pagination.append(nextButton);
    }

    // 예약확정 버튼
    // Reservation confirmation function
    function confirmed(counselId, element) {
        if (confirm("예약을 확정하시겠습니까?")) {
            // UI immediately updates
            $(element).prop('disabled', true).text('예약확정');

            $.ajax({
                url: `/reservation/statusUpdate`,
                method: 'POST',
                data: JSON.stringify({
                    counselId: counselId
                }),
                contentType: "application/json",
                success: function (data) {
                    // Handle success case here
                    // Optionally, re-fetch data to ensure consistency
                    fetchUpdatedData();
                },
                error: function (error) {
                    console.error('에러났다:', error);
                    // On failure, revert UI change
                    $(element).prop('disabled', false).text('확정대기');
                }
            });
        } else {
            console.log('Reservation update canceled');
        }
    }


    function initializePagination() {
        $.ajax({
            url: `/client/schedule`,
            method: 'GET',
            data: {
                userId: userId,
                page: 0,
                size: size
            },
            success: function (data) {
                totalPages = data.totalPages;
                updatePagination(data);
                fetchSchedules(currentPage);
            },
            error: function (error) {
                console.error('Error initializing pagination:', error);
            }
        });
    }
</script>
{{> layout/footer}}
